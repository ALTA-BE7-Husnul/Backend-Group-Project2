openapi: '3.0.3'
info:
  title: E Commerce App
  version: '1.0.0'
  description: 'Group Project 2 about E Commerce App Project'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/husnulnawafil27/ecommerce_app/1.0.0
  - url: https://satriacening.cloud.okteto.net
tags:
  - name: Authentication
    description: 'Authentication'
  - name: Users
    description: 'Users Management'
  - name: Products
    description: 'Products Management'
  - name: Carts
    description: 'Carts Management'
  - name: Order
    description: 'Order Management'
paths:
  #==================================#
  #    LOGIN
  #==================================#
  /login:
    post:
      tags:
        - Authentication
      description: 'Authentication'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  identifier: "alta@alterra.id",
                  password: "inipassword"
                }
              userData2:
                description: "Example data user"
                value: {
                  identifier: "alta2@alterra.id",
                  password: "inipassword2"
                }
      parameters: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLoginSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    code: 200,
                    status: "success",
                    message: "Login Success",
                    data: {
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
                responseData2:
                  description: response success 2
                  value: {
                    code: 200,
                    status: "success",
                    message: "Login Success",
                    data: {
                      token: "AyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    code: 400,
                    status: "failed",
                    message: "Login Failed. Email and Password incorrect."
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    code: 400,
                    status: "failed",
                    message: "Login Failed. Your email doesn't match any entry"
                  }
  #==================================#
  #    USER
  #==================================#
  /users:
    post:
      tags:
        - Users
      description: 'Add user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSchema'
            examples:
              userData1:
                description: "Example data user"
                value: {
                  name: "Alta",
                  email: "alta@alterra.id",
                  password: "inipassword",
                  address: "Jakarta"
                }
              userData2:
                description: "Example data user"
                value: {
                  name: "Alta 2",
                  email: "alta2@alterra.id",
                  password: "inipassword2",
                  address: "Jakarta2"
                }
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  /users/{id}:
    get:
      tags:
        - Users
      description: 'Get user by id'
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: 'id user'
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/getUserProfileSuccess'
        '400':
          $ref: '#/components/responses/getUserProfileFailed'
    put:
      tags:
        - Users
      description: 'Update user by id'
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: 'id user'
          in: path
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: husnul
                email:
                  type: string
                  example: husnul@mail.com
                password:
                  type: string
                  example: qwerty123
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
    delete:
      tags:
        - Users
      description: 'Delete user by id'
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  #==================================#
  #    PRODUCT
  #==================================#
  /products:
    get:
      tags:
        - Products
      description: 'Get all products'
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Products
      description: 'Add a new product'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productSchema'
            examples:
              productData1:
                description: "Example data product"
                value: {
                  name: "Iphone 13 Pro",
                  category: "Elektronik",
                  image: "iphone13.png",
                  price: 18000000,
                  qty: 3
                }
              productData2:
                description: "Example data user"
                value: {
                  name: "Iphone 12 Pro",
                  category: "Elektronik",
                  image: "iphone13.png",
                  price: 15000000,
                  qty: 10
                }
      security:
        - JWTAuth: []
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/responseSuccess'
        '400':
          $ref: '#/components/responses/responseFailed'
  /products/{id}:
    get:
      tags:
        - Products
      description: 'Get products by id'
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK
    put:
      tags:
        - Products
      description: 'Update product by id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productSchema'
            examples:
              change_name:
                description: "Example data product"
                value: {
                  name: "Iphone 13 Pro Max",
                }
              change_category:
                description: "Example data product"
                value: {
                  category: "Handphone"
                }
              change_image:
                description: "Example data product"
                value: {
                  image: "iphone13promax.jpg"
                }
              change_price:
                description: "Example data product"
                value: {
                  price: 8000000
                }
              change_qty:
                description: "Example data product"
                value: {
                  qty: 1
                }
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Products
      description: 'Delete product by id'
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: id user
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK
  #==================================#
  #    CART
  #==================================#
  /cart:
    get:
      tags:
        - Carts
      description: ''
      security:
        - JWTAuth: []
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Carts
      description: ''
      security:
        - JWTAuth: []
      parameters: []
      responses:
        '200':
          description: OK
  /cart/{id}:
    put:
      tags:
        - Carts
      description: ''
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: 'id user'
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Carts
      description: ''
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: 'id user'
          in: path
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK
  #==================================#
  #    ORDER
  #==================================#
  /order:
    get:
      tags:
        - Order
      description: ''
      security:
        - JWTAuth: []
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Order
      description: ''
      security:
        - JWTAuth: []
      parameters: []
      responses:
        '200':
          description: OK
#==================================#
#    COMPONENT
#==================================#
components:
  #==================================#    
  #    JWT
  #==================================#
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  #==================================#
  #    SCHEMAS
  #==================================#
  schemas:
    requestLogin:
      type: object
      properties:
        "identifier":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
    userSchema:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "address":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
    productSchema:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
        "description":
          type: string
          minLength: 1
        "category":
          type: string
          minLength: 1
        "image":
          type: string
          minLength: 1
        "price":
          type: integer
          minLength: 1
        "qty":
          type: integer
          minLength: 1
    successGetSingleUserResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "status": {
          type: string
        },
        "data": {
          type: object
        }
      }
    responseLoginSuccess:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "status": {
          type: string
        },
        "data":{
          type: object
        }
      }
    successResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "status": {
          type: string
        }
      }
    failedResponse:
      type: object
      properties: {
        "code":{
          type: number
        },
        "message": {
          type: string
        },
        "status": {
          type: string
        }
      }
  #==================================#    
  #    PARAMETERS
  #==================================#
  # parameters:
  #   dataBook:
  #     name: "dataBook"
  #     in: query 

  requestBodies:
    userData:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSchema'
              type: object
              properties:
                name:
                  type: string
                  example: Alta
                email:
                  type: string
                  example: alta@mail.com
                password:
                  type: string
                  example: inipassword
                address:
                  type: string
                  example: Jakarta
  responses:
    #==================================#
    #    RESPONSE FOR GENERAL REQUEST
    #==================================#
    responseSuccess:
      description: Successful Operation
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Successful Operation
    responseFailed:
      description: register failed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Bad Request
    #==================================#
    #    RESPONSE REGISTER USER
    #==================================#
    registerSuccess:
      description: register success
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Register Success
    registerFailed:
      description: register failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Register Failed
    #==================================#
    #    RESPONSE LOGIN USER
    #==================================#
    loginSuccess:
      description: login success
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Login Success
              data:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySWQiOjExfQ.YQ47sxFkIfbDVyQ5o6ix38w4BYxnNOPG3F5isqkyyv8
    loginFailed:
      description: login failed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: fail
              message:
                type: string
                example: Login Failed
    #==================================#
    #    RESPONSE GET USER PROFILE
    #==================================#
    getUserProfileSuccess:
      description: success get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 200
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Get User Profile
              data:
                type: object
                properties:
                  name:
                    type: string
                    example: Alta
                  email:
                    type: string
                    example: alta@mail.com
                  address:
                    type: string
                    example: Surabaya
    getUserProfileFailed:
      description: fail to get user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              status:
                type: string
                example: failed
              message:
                type: string
                example: Fail to Get User Profile
    #==================================#
    #    RESPONSE EDIT USER PROFILE
    #==================================#
    editUserProfileSuccess:
      description: success change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Update Profile
    editUserProfileFailed:
      description: fail to change user profile
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Update Profile
    #==================================#
    #    RESPONSE EDIT USER PASSWORD
    #==================================#
    editUserPasswordSuccess:
      description: success change password
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Success Change Password
    editUserPasswordFailed:
      description: fail to change password
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Fail to Change Password
    #==================================#
    #    RESPONSE LOGOUT
    #==================================#
    logoutSuccess:
      description: success logout
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Logout Success
    logoutFailed:
      description: fail to logout
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: Logout Failed